from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext

import app.keyboards as kb
from app.states import Reg
from app.db.requests import get_user_id, get_cart, get_profile, get_item, add_user, add_user_location, add_to_cart

router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    if await get_user_id(user_id) == user_id:
        await message.answer(
            '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!', reply_markup=kb.main_menu
        )
    else:
        await message.answer(
            '''
            üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –ø–∏—Ü—Ü–∞-–±–æ—Ç! üçï

            –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–∫–∞–∑–∞—Ç—å —Å–∞–º—É—é –≤–∫—É—Å–Ω—É—é –ø–∏—Ü—Ü—É, –Ω–µ –æ—Ç–≤–ª–µ–∫–∞—è—Å—å –æ—Ç –≤–∞–∂–Ω—ã—Ö –¥–µ–ª.
            
            –í–æ—Ç –∫–∞–∫ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç:
            1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–∏–º—É—é –ø–∏—Ü—Ü—É –∏–∑ –Ω–∞—à–µ–≥–æ –º–µ–Ω—é.
            2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –µ–µ –≤ –∫–æ—Ä–∑–∏–Ω—É.
            3Ô∏è‚É£ –ù–∞–∑–æ–≤–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ ‚Äî –∏ –≤—Å—ë, –º—ã —É–∂–µ –≥–æ—Ç–æ–≤–∏–º –≤–∞—à –∑–∞–∫–∞–∑!
            
            üí¨ –ù–∞–ø–∏—à–∏—Ç–µ ‚Äú–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è:‚Äù, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑.
            
            üî• –ü–∏—Ü—Ü–∞ —É–∂–µ –∂–¥—ë—Ç, —á—Ç–æ–±—ã —Å–æ–≥—Ä–µ—Ç—å –≤–∞—à –¥–µ–Ω—å! üòâ
            '''
            , reply_markup=kb.register_profile
        )

# @router.message(F.data == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
# async def register(message: Message):
#     await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ: ', reply_markup=kb.main_menu)

# @router.message(Command('reg'))
@router.message(F.text == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
async def reg_name(message: Message, state: FSMContext):
    await state.set_state(Reg.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:', reply_markup=ReplyKeyboardRemove())

@router.message(Reg.name)
async def reg_contact(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Reg.contact)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç:', reply_markup=kb.send_contact)

@router.message(Reg.contact, F.contact)
async def reg_location(message: Message, state: FSMContext):
    await state.update_data(contact=message.contact.phone_number)
    await state.set_state(Reg.location)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:', reply_markup=kb.send_location)

@router.message(Reg.contact)
async def reg_no_contact(message: Message):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!')

@router.message(Reg.location, F.location)
async def reg_age(message: Message, state: FSMContext):
    await state.update_data(location=[message.location.latitude, message.location.longitude])
    await state.set_state(Reg.age)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç', reply_markup=ReplyKeyboardRemove())

@router.message(Reg.location)
async def reg_no_location(message: Message):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!')

@router.message(Reg.age)
async def reg_done(message: Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(age=int(message.text))
        data = await state.get_data()
        user_id = message.from_user.id
        # dc = {'name': '–ê—Ä', 'contact': '79687200277', 'location': [55.748361, 37.536696], 'age': 32}
        # (user_id: int, name: str, contact: str, age: int):
        # print(dc['name'])
        await add_user(user_id=user_id, name=data['name'], contact=data['contact'], age=data['age'])
        await add_user_location(user_id=user_id, location=str(data['location']))
        # print(data)  # Debugging data output; replace with actual data handling
        # print(user_id)
        await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', reply_markup=kb.main_menu)
        await state.clear()
    else:
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!')

@router.message(F.text == '–ú–µ–Ω—é')
async def menu(message: Message):
    await message.answer('–î–æ–±–∞–≤—å—Ç–µ –ø–∏—Ü—Ü—É –≤ –∫–æ—Ä–∑–∏–Ω—É:', reply_markup= await kb.menu())


@router.message(F.text == '–ö–æ—Ä–∑–∏–Ω–∞')
async def cart(message: Message):
    user_id = message.from_user.id
    cart_items = await get_cart(user_id=user_id)

    if not cart_items:
        # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
        await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.', reply_markup=kb.cart_user)
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∫–æ—Ä–∑–∏–Ω—ã
        cart_content = "\n".join([f"{item.name}: {item.price} —Ä—É–±." for item in cart_items])
        await message.answer(f'–í –∫–æ—Ä–∑–∏–Ω–µ:\n{cart_content}', reply_markup=kb.cart_user)

@router.message(F.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def cart(message: Message):
    user_id = message.from_user.id
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:', reply_markup=kb.settings)

@router.message(F.text == '–ù–∞–∑–∞–¥')
async def cart(message: Message):
    await message.answer('–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=kb.main_menu)

@router.message(F.text == '–ü—Ä–æ—Ñ–∏–ª—å')
async def cart(message: Message):
    user_id = message.from_user.id
    profile = await get_profile(user_id)
    await message.answer(f'''–ò–º—è: {profile.name}\n–í–æ–∑—Ä–∞—Å—Ç: {profile.age}\n–¢–µ–ª–µ—Ñ–æ–Ω: {profile.contact} \n
                            ''', reply_markup=kb.settings) # –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {profile.location} \n

@router.message(F.text == '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
async def cart(message: Message):
    user_id = message.from_user.id
    await message.answer('–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä–µ–ª–∏–∑–µ!', reply_markup=kb.settings)

@router.message(F.text == '–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É')
async def cart(message: Message):
    user_id = message.from_user.id
    await message.answer('–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä–µ–ª–∏–∑–µ!', reply_markup=kb.cart_user)

@router.message(F.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑')
async def cart(message: Message):
    user_id = message.from_user.id
    await message.answer('–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä–µ–ª–∏–∑–µ!', reply_markup=kb.cart_user)

@router.callback_query(F.data.startswith('pizza_'))
async def add_pizza(callback: CallbackQuery):
    user_id = callback.from_user.id  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ callback.from_user.id
    pizza_id = callback.data.split('_')[1]
    menu_o = await get_item(menu_id=pizza_id)
    # print(menu_o) Menu(id=6, name=–û–≤–æ—â–Ω–∞—è, picture_id=img6, price=500, effective_from_dttm=2024-11-18 23:10:16.133076)
    # add_to_cart(menu_id: int, user_id: int, name: str, picture_id: str, price: str):
    await add_to_cart(menu_id=menu_o.id, name=menu_o.name, user_id=user_id, picture_id=menu_o.picture_id,
                      price=menu_o.price)
    await callback.answer()
    await callback.message.edit_text('–ü–∏—Ü—Ü–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É!')

# @router.message(F.photo)
# async def get_file_id_photo(message: Message):
#     # –ü–æ–ª—É—á–µ–Ω–∏–µ file_id —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
#     file_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é (—Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ)
#     await message.reply(f"Photo file_id: {file_id}")